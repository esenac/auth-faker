{
	"info": {
		"_postman_id": "0cd657dd-d065-4a86-8c32-8f94d8ede21b",
		"name": "Auth Faker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get JWKS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Array length is 1\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.keys.length).to.eql(1);",
							"});",
							"pm.test(\"JWKS have value\", function () {",
							"    var jsonData = pm.response.json();",
							"    var key = jsonData.keys[0];",
							"    pm.expect(key.e).to.eql(\"AQAB\");",
							"    pm.expect(key.kty).to.eql(\"RSA\");",
							"    pm.expect(key.n).to.not.null;",
							"    pm.expect(key.x5c.length).to.eql(1);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://auth-faker:80/.well-known/jwks.json",
					"protocol": "http",
					"host": [
						"auth-faker"
					],
					"port": "80",
					"path": [
						".well-known",
						"jwks.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create JWT token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" function parseJwt (token,part) {",
							"   var base64Url = token.split('.')[part];",
							"   var words = CryptoJS.enc.Base64.parse(base64Url);",
							"   var jsonPayload = CryptoJS.enc.Utf8.stringify(words);",
							"   return  JSON.parse(jsonPayload);",
							"};",
							"",
							"var jsonData = pm.response.json().token;",
							"",
							"var jwtInfo ={};",
							"jwtInfo.header = parseJwt(jsonData,0);",
							"jwtInfo.payload = parseJwt(jsonData,1);",
							"",
							"pm.test(\"JWT header has right alg and typ fields\", function () {",
							"    pm.expect(jwtInfo.header.alg).eql(\"RS256\");",
							"    pm.expect(jwtInfo.header.typ).eql(\"JWT\");",
							"});",
							"pm.test(\"JWT payload has all the desired claims\", function () {",
							"    var requestBody = JSON.parse(pm.request.body.raw);",
							"    pm.expect(jwtInfo.payload.aud).eql(requestBody.audience);",
							"    pm.expect(jwtInfo.payload.sub).eql(requestBody.subject);",
							"    pm.expect(jwtInfo.payload.scope).eql(requestBody.scope);    ",
							"    pm.expect(jwtInfo.payload.iss).eql(requestBody.issuer); ",
							"});",
							"pm.test(\"Custom claims to be set\", function(){",
							"    var requestBody = JSON.parse(pm.request.body.raw);",
							"    if (requestBody.custom_claims != null){",
							"        for (const [k, v] of Object.entries(requestBody.custom_claims)) {",
							"            pm.expect(jwtInfo.payload[k]).to.eql(requestBody.custom_claims[k]);",
							"        }",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"custom_claims\": {\n        \"custom\": \"claim\"\n    },\n    \"subject\": \"test-subject\",\n    \"audience\": \"test-audience\",\n    \"scope\": \"test-scope\",\n    \"issuer\": \"test-issuer\"\n}"
				},
				"url": {
					"raw": "http://auth-faker:80/token",
					"protocol": "http",
					"host": [
						"auth-faker"
					],
					"port": "80",
					"path": [
						"token"
					]
				}
			},
			"response": []
		}
	]
}